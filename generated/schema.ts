// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Gladiator extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Gladiator entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Gladiator must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Gladiator", id.toString(), this);
    }
  }

  static load(id: string): Gladiator | null {
    return changetype<Gladiator | null>(store.get("Gladiator", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get previousOwner(): Bytes {
    let value = this.get("previousOwner");
    return value!.toBytes();
  }

  set previousOwner(value: Bytes) {
    this.set("previousOwner", Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get character_name(): string {
    let value = this.get("character_name");
    return value!.toString();
  }

  set character_name(value: string) {
    this.set("character_name", Value.fromString(value));
  }

  get character_sex(): boolean {
    let value = this.get("character_sex");
    return value!.toBoolean();
  }

  set character_sex(value: boolean) {
    this.set("character_sex", Value.fromBoolean(value));
  }

  get character_classNum(): i32 {
    let value = this.get("character_classNum");
    return value!.toI32();
  }

  set character_classNum(value: i32) {
    this.set("character_classNum", Value.fromI32(value));
  }

  get character_bonusStats(): i32 {
    let value = this.get("character_bonusStats");
    return value!.toI32();
  }

  set character_bonusStats(value: i32) {
    this.set("character_bonusStats", Value.fromI32(value));
  }

  get character_ethnicity(): i32 {
    let value = this.get("character_ethnicity");
    return value!.toI32();
  }

  set character_ethnicity(value: i32) {
    this.set("character_ethnicity", Value.fromI32(value));
  }

  get character_recruitedAt(): BigInt {
    let value = this.get("character_recruitedAt");
    return value!.toBigInt();
  }

  set character_recruitedAt(value: BigInt) {
    this.set("character_recruitedAt", Value.fromBigInt(value));
  }

  get nameChanged(): boolean {
    let value = this.get("nameChanged");
    return value!.toBoolean();
  }

  set nameChanged(value: boolean) {
    this.set("nameChanged", Value.fromBoolean(value));
  }

  get listed(): boolean {
    let value = this.get("listed");
    return value!.toBoolean();
  }

  set listed(value: boolean) {
    this.set("listed", Value.fromBoolean(value));
  }

  get burnt(): boolean {
    let value = this.get("burnt");
    return value!.toBoolean();
  }

  set burnt(value: boolean) {
    this.set("burnt", Value.fromBoolean(value));
  }
}

export class Item extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Item entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Item must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Item", id.toString(), this);
    }
  }

  static load(id: string): Item | null {
    return changetype<Item | null>(store.get("Item", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get previousOwner(): Bytes {
    let value = this.get("previousOwner");
    return value!.toBytes();
  }

  set previousOwner(value: Bytes) {
    this.set("previousOwner", Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get item_classId(): i32 {
    let value = this.get("item_classId");
    return value!.toI32();
  }

  set item_classId(value: i32) {
    this.set("item_classId", Value.fromI32(value));
  }

  get item_itemId(): i32 {
    let value = this.get("item_itemId");
    return value!.toI32();
  }

  set item_itemId(value: i32) {
    this.set("item_itemId", Value.fromI32(value));
  }

  get item_tier(): i32 {
    let value = this.get("item_tier");
    return value!.toI32();
  }

  set item_tier(value: i32) {
    this.set("item_tier", Value.fromI32(value));
  }

  get item_repairs(): i32 {
    let value = this.get("item_repairs");
    return value!.toI32();
  }

  set item_repairs(value: i32) {
    this.set("item_repairs", Value.fromI32(value));
  }

  get newRepairs(): i32 {
    let value = this.get("newRepairs");
    return value!.toI32();
  }

  set newRepairs(value: i32) {
    this.set("newRepairs", Value.fromI32(value));
  }

  get listed(): boolean {
    let value = this.get("listed");
    return value!.toBoolean();
  }

  set listed(value: boolean) {
    this.set("listed", Value.fromBoolean(value));
  }

  get burnt(): boolean {
    let value = this.get("burnt");
    return value!.toBoolean();
  }

  set burnt(value: boolean) {
    this.set("burnt", Value.fromBoolean(value));
  }
}

export class MarketTransaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MarketTransaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MarketTransaction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MarketTransaction", id.toString(), this);
    }
  }

  static load(id: string): MarketTransaction | null {
    return changetype<MarketTransaction | null>(
      store.get("MarketTransaction", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get unitPrice(): BigInt {
    let value = this.get("unitPrice");
    return value!.toBigInt();
  }

  set unitPrice(value: BigInt) {
    this.set("unitPrice", Value.fromBigInt(value));
  }

  get previousOwner(): Bytes {
    let value = this.get("previousOwner");
    return value!.toBytes();
  }

  set previousOwner(value: Bytes) {
    this.set("previousOwner", Value.fromBytes(value));
  }

  get newOwner(): Bytes | null {
    let value = this.get("newOwner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set newOwner(value: Bytes | null) {
    if (!value) {
      this.unset("newOwner");
    } else {
      this.set("newOwner", Value.fromBytes(<Bytes>value));
    }
  }

  get listed(): boolean {
    let value = this.get("listed");
    return value!.toBoolean();
  }

  set listed(value: boolean) {
    this.set("listed", Value.fromBoolean(value));
  }
}
